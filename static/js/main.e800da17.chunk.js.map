{"version":3,"sources":["components/Board.js","components/Square.js","App.js","index.js"],"names":["Board","props","className","Square","x","o","defaultSquares","Array","fill","lines","App","useState","squares","setSquares","winner","setWinner","level","setLevel","useEffect","isComputerTurn","filter","elemSquares","length","checkLines","a","b","c","squaresIndexes","checkSquares","map","index","JSON","stringify","sort","emptyIndexes","elem","playerWon","putComputer","newSquares","winingLines","linesToBlock","linesToContinue","Math","floor","random","changeLevel","console","log","square","onClick","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e800da17.chunk.js","sourcesContent":["function Board(props) {\r\n    return (\r\n      <div className=\"board\" {...props} />\r\n    );\r\n  }\r\n  \r\n  export default Board;","function Square(props) {\r\n    return (\r\n      <div className={'square'} {...props}>{props.x ? 'x' : (props.o ? 'o' : '')}</div>\r\n    );\r\n  }\r\n  \r\n  export default Square;","import \"./App.css\";\r\nimport React from \"react\";\r\nimport Board from \"./components/Board\";\r\nimport Square from \"./components/Square\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst defaultSquares = () => new Array(9).fill(null);\r\n\r\nconst lines = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\nfunction App() {\r\n  const [squares, setSquares] = useState(defaultSquares());\r\n  const [winner, setWinner] = useState(null);\r\n  const [level, setLevel] = useState(\"easy\");\r\n\r\n  useEffect(() => {\r\n    const isComputerTurn =\r\n      squares.filter((elemSquares) => elemSquares !== null).length % 2 === 1;\r\n    const checkLines = (a, b, c) => {\r\n      return lines.filter((squaresIndexes) => {\r\n        const checkSquares = squaresIndexes.map((index) => squares[index]);\r\n        return (\r\n          JSON.stringify([a, b, c].sort()) ===\r\n          JSON.stringify(checkSquares.sort())\r\n        );\r\n      });\r\n    };\r\n\r\n    const emptyIndexes = squares\r\n      .map((elemSquares, index) => (elemSquares === null ? index : null))\r\n      .filter((elem) => elem !== null);\r\n    const playerWon = checkLines(\"x\", \"x\", \"x\").length > 0;\r\n    const computerWon = checkLines(\"o\", \"o\", \"o\").length > 0;\r\n\r\n    if (computerWon) {\r\n      setWinner(\"o\");\r\n      return;\r\n    }\r\n    if (playerWon) {\r\n      setWinner(\"x\");\r\n      return;\r\n    }\r\n    if (emptyIndexes.length === 0) {\r\n      setWinner(\"draw\");\r\n      return;\r\n    }\r\n\r\n    const putComputer = (index) => {\r\n      let newSquares = [...squares];\r\n      newSquares[index] = \"o\";\r\n      setSquares([...newSquares]);\r\n    };\r\n\r\n    if (isComputerTurn && emptyIndexes.length > 0) {\r\n      if (level === \"normal\" && squares[4] === null) {\r\n        putComputer(4);\r\n        return;\r\n      }\r\n\r\n      const winingLines = checkLines(\"o\", \"o\", null);\r\n      if (winingLines.length > 0) {\r\n        const winIndex = winingLines[0].filter(\r\n          (index) => squares[index] === null\r\n        )[0];\r\n        putComputer(winIndex);\r\n        return;\r\n      }\r\n\r\n      const linesToBlock = checkLines(\"x\", \"x\", null);\r\n      if (linesToBlock.length > 0) {\r\n        const blockIndex = linesToBlock[0].filter(\r\n          (index) => squares[index] === null\r\n        )[0];\r\n        putComputer(blockIndex);\r\n        return;\r\n      }\r\n\r\n      const linesToContinue = checkLines(\"o\", null, null);\r\n      if (level === \"normal\" && linesToContinue.length > 0) {\r\n        putComputer(\r\n          linesToContinue[0].filter((index) => squares[index] === null)[0]\r\n        );\r\n        return;\r\n      }\r\n\r\n      const randomIndex =\r\n        emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)];\r\n      putComputer(randomIndex);\r\n    }\r\n  }, [squares]);\r\n\r\n  const handleClick = (index) => {\r\n    if (squares[index] !== null || winner) return;\r\n    const isPlayerTurn =\r\n      squares.filter((elemSquares) => elemSquares !== null).length % 2 === 0;\r\n    if (isPlayerTurn) {\r\n      let newSquares = squares;\r\n      newSquares[index] = \"x\";\r\n      setSquares([...newSquares]);\r\n    }\r\n  };\r\n\r\n  const resetClick = () => {\r\n    setWinner(null);\r\n    setSquares(defaultSquares);\r\n  };\r\n\r\n  const changeLevel = () => {\r\n    console.log(\"changeLevel\");\r\n    if (level === \"easy\") setLevel(\"normal\");\r\n    if (level === \"normal\") setLevel(\"easy\");\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"header\">Tic tac toe</div>\r\n      <Board>\r\n        {squares.map((square, index) => (\r\n          <Square\r\n            key={index}\r\n            x={square === \"x\" ? 1 : 0}\r\n            o={square === \"o\" ? 1 : 0}\r\n            onClick={() => handleClick(index)}\r\n          />\r\n        ))}\r\n      </Board>\r\n      {!!winner && winner === \"x\" && (\r\n        <div className=\"result green\">You WON!</div>\r\n      )}\r\n      {!!winner && winner === \"o\" && (\r\n        <div className=\"result red\">You LOST!</div>\r\n      )}\r\n      {!!winner && winner === \"draw\" && (\r\n        <div className=\"result yellow\">DRAW game!</div>\r\n      )}\r\n      <div className=\"button_div\">\r\n        <button\r\n          className={level === \"easy\" ? \"active\" : \"button\"}\r\n          onClick={changeLevel}\r\n        >\r\n          Easy\r\n        </button>\r\n        <button\r\n          className={level === \"normal\" ? \"active\" : \"button\"}\r\n          onClick={changeLevel}\r\n        >\r\n          Normal\r\n        </button>\r\n        <button className=\"button reset\" onClick={resetClick}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}